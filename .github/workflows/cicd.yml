name: CI/CD

on:
  push:
    branches: main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 레포 체크아웃
        uses: actions/checkout@main

      - name: Yarn 설치
        run: npm install -g yarn

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@master

      - name: GitHub Container registry 로그인
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{github.repository_owner}}
          password: ${{secrets.GHCR_TOKEN}}

      - name: 빌드 및 푸시
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64, linux/arm64
          tags: ghcr.io/${{github.repository_owner}}/chzzk-connector:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 레포 체크아웃
        uses: actions/checkout@main

      - name: .env 생성
        env:
          SECRETS_JSON: ${{ toJson(secrets) }}
        run: |
          echo "$SECRETS_JSON" | jq -r 'to_entries | map(select(.key | startswith("ENV"))) | map("\(.key)=\(.value|tostring)") | .[]' > .env

      - name: .env 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: .env
          target: ${{ secrets.SERVER_PATH }}/site/chzzk-connector
          overwrite: true

      - name: 서버 접속
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.SERVER_PATH }}/site/chzzk-connector

            # Docker Hub 로그인
            echo ${{secrets.GHCR_TOKEN}} | docker login ghcr.io -u ${{github.repository_owner}} --password-stdin

            # 이미지 풀링
            docker pull ghcr.io/${{github.repository_owner}}/chzzk-connector:latest

            # 새로운 이미지를 Green/Blue 중 하나로 태그
            if docker ps | grep chzzk-connector-blue; then
              NEW_DEPLOYMENT="green"
              OLD_DEPLOYMENT="blue"
            else
              NEW_DEPLOYMENT="blue"
              OLD_DEPLOYMENT="green"
            fi

            docker-compose up -d chzzk-connector-$NEW_DEPLOYMENT

            # 새 컨테이너가 시작될 시간을 기다림
            sleep 10

            # Nginx 설정 변경
            if [ "$NEW_DEPLOYMENT" == "green" ]; then
              sed -i "s/proxy_pass http:\/\/chzzk-connector-$OLD_DEPLOYMENT:${{ secrets.ENV_PORT }};/proxy_pass http:\/\/chzzk-connector-$NEW_DEPLOYMENT:${{ secrets.ENV_PORT }};/" ${{ secrets.SERVER_PATH }}/nginx/conf.d/chzzk-connector.conf
            else
              sed -i "s/proxy_pass http:\/\/chzzk-connector-$OLD_DEPLOYMENT:${{ secrets.ENV_PORT }};/proxy_pass http:\/\/chzzk-connector-$NEW_DEPLOYMENT:${{ secrets.ENV_PORT }};/" ${{ secrets.SERVER_PATH }}/nginx/conf.d/chzzk-connector.conf
            fi

            # Nginx 재시작
            docker-compose -f ${{ secrets.SERVER_PATH }}/docker-compose-multi.yml up -d --force-recreate --no-deps nginx

            # 이전 버전의 컨테이너 중지 및 제거
            docker-compose stop chzzk-connector-$OLD_DEPLOYMENT
            docker-compose rm -f chzzk-connector-$OLD_DEPLOYMENT
